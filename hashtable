What is a HashTable?

Basically, a hash table is an array containing all of the keys to search on. 
The position of each key in the array is determined by the hash function, which 
can be any function which always maps the same input to the same output. We shall 
assume that the hash function is O(1).

So when we insert something into the hash table, we use the hash function 
(let's call it h) to find the location where to put it, and put it there. 
Now we insert another thing, hashing and storing. And another. Each time 
we insert data, it takes O(1) time to insert it (since the hash function 
is O(1).

Looking up data is the same. If we want to find a value, x, we have only 
to find out h(x), which tells us where x is located in the hash table. So 
we can look up any hash value in O(1) as well.

Now to the lie: The above is a very nice theory with one problem: what if 
we insert data and there is already something in that position of the array? 
There is nothing which guarantees that the hash function won't produce the 
same output for two different inputs (unless you have a perfect hash function, 
but those are tricky to produce). Therefore, when we insert we need to take one 
of two strategies:

Store multiple values at each spot in the array (say, each array slot has a 
linked list). Now when you do a lookup, it is still O(1) to arrive at the correct 
place in the array, but potentially a linear search down a (hopefully short) linked 
list. This is called "separate chaining".
If you find something is already there, hash again and find another location. 
Repeat until you find an empty spot, and put it there. The lookup procedure can 
follow the same rules to find the data. Now it's still O(1) to get to the first 
location, but there is a potentially (hopefully short) linear search to bounce 
around the table till you find the data you are after. This is called "open addressing".

Basically, both approaches are still mostly O(1) but with a hopefully-short linear 
sequence. We can assume for most purposes that it is O(1). If the hash table is getting 
too full, those linear searches can become longer and longer, and then it is time to 
"re-hash" which means to create a new hash table of a much bigger size and insert all 
the data back into it.

